{"version":3,"sources":["english_generator/EnglishGenerator.js","english_generator/StatFinder.js","App.js","serviceWorker.js","index.js"],"names":["numbers","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","30","40","50","60","70","80","90","EnglishGenerator","generate","input","ones","tens","hundreds","Math","floor","output","push","join","StatFinder","calculateStats","target","occurrences","match","RegExp","length","targetProbability","string","getEnglishString","startInput","endInput","start","parseInt","end","Array","from","_","x","map","findAllStats","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","startInteger","startError","endInteger","endError","targetCharacter","stats","_handleInputChange","bind","assertThisInitialized","_handleCalculateClick","ev","nextState","objectSpread","name","value","setState","e","preventDefault","_checkForErrors","errorsFound","startInt","endInt","_this2","react_default","a","createElement","className","type","id","onChange","split","key","onClick","toFixed","concat","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82461319.chunk.js","sourcesContent":["const numbers = {\n  1: 'one',\n  2: 'two',\n  3: 'three',\n  4: 'four',\n  5: 'five',\n  6: 'six',\n  7: 'seven',\n  8: 'eight',\n  9: 'nine',\n  10: 'ten',\n  11: 'eleven',\n  12: 'twelve',\n  13: 'thirteen',\n  14: 'fourteen',\n  15: 'fifteen',\n  16: 'sixteen',\n  17: 'seventeen',\n  18: 'eighteen',\n  19: 'nineteen',\n  20: 'twenty',\n  30: 'thirty',\n  40: 'forty',\n  50: 'fifty',\n  60: 'sixty',\n  70: 'seventy',\n  80: 'eighty',\n  90: 'ninety',\n};\n\nconst EnglishGenerator = {\n  generate: (input) => {\n    const ones = input % 10;\n    const tens = ( input % 100 ) - ones;\n    const hundreds = Math.floor(input / 100);\n\n    const output = [];\n    if(hundreds > 0) {\n      output.push(numbers[hundreds]);\n      output.push(\"hundred\");\n    }\n    if(tens >= 20) {\n      output.push(numbers[tens]);\n\n      if(ones > 0) {\n        output.push(numbers[ones]);\n      }\n    } else {\n      output.push(numbers[ones + tens]);\n    }\n\n    return output.join(\"\");\n  }\n};\n\nexport default EnglishGenerator;\n","import EnglishGenerator from './EnglishGenerator'\n\nconst StatFinder = {\n  calculateStats: (input, target) => {\n    const occurrences = (input.match(new RegExp(target, \"g\")) || []).length;\n    return {\n      length: input.length,\n      occurrences: occurrences,\n      targetProbability: occurrences / input.length,\n      string: input\n    };\n  },\n\n  getEnglishString: (startInput, endInput) => {\n    let start = parseInt(startInput);\n    let end = parseInt(endInput);\n\n    return Array\n      .from({length: end - start + 1}, (_, x) => x + start)\n      .map(EnglishGenerator.generate)\n      .join(\"\");\n  },\n\n  findAllStats: (start, end, target) => {\n    return StatFinder.calculateStats(\n      StatFinder.getEnglishString(start, end),\n      target);\n  }\n}\n\nexport default StatFinder;\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport StatFinder from './english_generator/StatFinder'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startInteger: 1,\n      startError: '',\n      endInteger: 123,\n      endError: '',\n      targetCharacter: \"e\",\n      stats: null\n    };\n\n    this._handleInputChange = this._handleInputChange.bind(this);\n    this._handleCalculateClick = this._handleCalculateClick.bind(this);\n  }\n\n  _handleInputChange(ev) {\n    const nextState = {...this.state};\n    nextState.stats = null;\n    nextState[ev.target.name] = ev.target.value;\n    this.setState(nextState);\n  }\n\n  _handleCalculateClick(e) {\n    e.preventDefault();\n    const nextState = {...this.state};\n\n    if(!this._checkForErrors(nextState)) {\n      nextState.stats = StatFinder.findAllStats(\n        nextState.startInteger,\n        nextState.endInteger,\n        nextState.targetCharacter\n      );\n    }\n    this.setState(nextState);\n  }\n\n  _checkForErrors(state) {\n    let errorsFound = false;\n    let startInt = parseInt(state.startInteger);\n    let endInt = parseInt(state.endInteger);\n    state.startError = '';\n    state.endError = '';\n\n    if(endInt < startInt) {\n      errorsFound = true;\n      state.endError = \"Last number must be greater than or equal to First Number\";\n    } else {\n      if(endInt > 999 || endInt < 1) {\n        errorsFound = true;\n        state.endError = \"Last number must be between 1 and 999\";\n      }\n      if(startInt > 999 || startInt < 1) {\n        errorsFound = true;\n        state.startError = \"First number must be between 1 and 999\";\n      }\n    }\n\n    return errorsFound;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Number to English Generator</h1>\n        <p>\n          Choose a first number, last number, and a letter. The\n          generator will print the English equivalent of all the\n          numbers in the range and then tell you the number of times\n          the specified letter appears.\n        </p>\n        <div className=\"form\">\n          <div className=\"field\">\n            <label className=\"label\" >First Number</label>\n            <input\n              className={\"input\" + (this.state.startError ? \" inputError\" : \"\")}\n              type=\"number\"\n              name=\"startInteger\"\n              id=\"startInteger\"\n              value={this.state.startInteger}\n              onChange={this._handleInputChange} />\n            { this.state.startError ? <span className=\"error\">{ this.state.startError }</span> : '' }\n          </div>\n          <div className=\"field\">\n            <label className=\"label\" >Last Number</label>\n            <input\n              className={\"input\" + (this.state.endError ? \" inputError\" : \"\")}\n              type=\"number\"\n              name=\"endInteger\"\n              id=\"endInteger\"\n              value={this.state.endInteger}\n              onChange={this._handleInputChange} />\n            { this.state.endError ? <span className=\"error\">{ this.state.endError }</span> : '' }\n          </div>\n          <div className=\"field\">\n            <label className=\"label\" >Target Letter</label>\n            <select\n              className=\"input\"\n              name=\"targetCharacter\"\n              id=\"targetCharacter\"\n              value={this.state.targetCharacter}\n              onChange={this._handleInputChange} >\n              {\n                \"abcdefghijklmnopqrstuvwxyz\".split('').map((x) => {\n                  return <option key={x} value={x}>{x}</option>;\n                })\n              }\n            </select>\n          </div>\n          <input\n            type=\"submit\"\n            id=\"calculateButton\"\n            className=\"button\"\n            value=\"Calculate\"\n            onClick={this._handleCalculateClick} />\n        </div>\n        {\n          !this.state.stats ? '' : (\n            <div className=\"stats\">\n              <p>\n                The generated string is { this.state.stats.length } characters long.\n              </p>\n              <p>\n                The letter { this.state.targetCharacter } occurs { this.state.stats.occurrences } times.\n              </p>\n              <p>\n                The probability of a randomly chosen character being { this.state.targetCharacter } is about { this.state.stats.targetProbability.toFixed(4) }%.\n              </p>\n              <h3> The Whole String: </h3>\n              <p className=\"fullString\">\n                { this.state.stats.string.split(new RegExp(`(${this.state.targetCharacter})`, \"g\")).map( (x) => {\n                   if(x === this.state.targetCharacter) {\n                     return <span className=\"highlight\">{x}</span>;\n                   } else {\n                     return <span>{x}</span>;\n                   }\n                  })\n                }\n              </p>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}